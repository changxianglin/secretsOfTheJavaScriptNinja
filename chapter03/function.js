/**
 * JavaScript 中最关键的概念是： 函数是第一个类对象，或者说它们被称为一等公民。
 * 
 * 函数式的不同点到底是什么？
 * JavaScript 中对象有一下几种常用功能
 * 对象可通过字面量来创建 {}
 * 对象可以赋值给变量、数组项、或其他对象的属性
 * 对象可以作为参数传递给函数
 * 对象可以作为函数的返回值
 * 对象具有动态创建和分配的属性
 * 对象能做的任何一件事，函数也能做，函数也是对象，唯一的特殊之处在于它是可调用的，
 * 即函数会被调用以便执行某项动作
 *
 *
 * 第一类对象的特点之一是，它能够作为参数传入函数，
 *
 * 3.1.2 回调函数
 *
 * JavaScript 的重要特征之一是可以在表达式出现的任意位置创建函数，除此之外这种方式能使代码更
 * 紧凑和易于理解。当一个函数不在在代码的多出位置被调用时，该特性可以避免用非必须的名字污染全局命名空间。
 *
 * 使用比较器排序
 *
 * 函数作为对象的乐趣
 *
 * 存储函数
 *
 * 自记忆函数
 * 为了性能牺牲内存
 *
 * 函数定义
 * JavaScript 提供了几种定义函数的方式
 * 函数定义和函数表示式
 * 箭头函数
 * 构造函数
 * 生成器函数
 *
 * 理解这几种不同的很重要，因为函数创建的方式很大程度地影响了函数可被
 * 调用的时间、函数的行为以及函数可以在那个对象上被调用。
 *
 * 函数声明和函数表达式
 * 函数声明
 * 每个函数声明都以强制性的 function 开头
 *
 * 函数表达式
 *
 * 立即函数
 *
 * 箭头函数
 * 箭头函数是函数表达式的简化版本，
 * => 胖剪头符号 是定义箭头函数的核心
 * 最简形式 params => expression
 * 如果没有参数或者多余一个参数时，参数列表就必须包裹在括号内，
 * 如果只有一个参数时，括号不是必须的。
 * 参数列表后必须跟着一个胖箭头符号，
 * 胖箭头操作后面有两种可选方式，如果要创建一个简单函数，那么可以把表达式放在这里
 * 当箭头函数需要更多代码时，箭头操作符后则跟着一个代码块
 *
 * 3.4 函数的实参和行参
 * 行参是我们定义函数时所列举的变量
 * 实参是我们调用函数是所残敌给函数的值
 * 函数声明
 * 函数表达式
 * 箭头函数
 *
 * 当函数调用时提供一系列实参，这些实参就会以行参在函数中定义的顺序被赋值到形参上，
 * 第一个实参赋值到第一个行参，第二个实赋值到第二个形参上，以此类推。
 * 实参的数量大于形参的数量时并不会抛出错误，这种问题 JavaScript 处理得很好。
 * 如果行参的数量大于实参，那么那些没有对应实参的形参则会被设为 undefined
 *
 * 3.4.1 剩余参数
 *  */