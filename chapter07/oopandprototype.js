/*
* 第 7 章 面向对象于原型
* JavaScript 中函数是第一型对象，闭包可以使得函数变得更加灵活，有用，还可以结合生成器函数于 promise 解决异步代码的问题。
* 现在我们开始探讨 JavaScript 的另一个重要方面： 原型。
*
* 可以在原型对象上增加特定属性，原型是定义属性和功能的一种便捷方式，对象可以访问原型上的属性和功能。
* 原型类似于经典的面向对象语言中的类，实际上，JavaScript 中原型的主要用途是使用一种类风格的面向对象
* 和继承的方式进行编码，这于传统的基于类的语言 Java、C#类似，但也不完全使这样。
*
* 7.1 理解原型
* 在软件开发的过程中，为了避免重复造轮子，我们希望可以经可能地复用代码，继承使代码复用的一种方式，
* 继承有助于合成地组织程序代码，将一个对象的属性扩展到另一个对象上。在 JavaScript 中，可通过原型实现继承。
*
* 原型的概念很简单，每个对象都含有原型的引用，当查找属性时，若对象本身不具有该属性，则会查找原型上是否有该属性。
* 每个对象都可以有一个原型，每个对象的原型也可以拥有一个原型，以此类推，形成一个原型链。
* 查找特定属性将会被委托在原型链上，只有当没有更多的原型可以进行查找时，才会停止查找。
*
* 7.2 对象构造器于原型
* 创建一个新对象最简单的方法。创建空对象。
* 但是那些具有面向对象开发语言背景的读者，可能会想念封装和构建类的构造函数。
* 构造函数使用来初始化对象为知己的初始状态。毕竟，如果我们要创建多个相同类型的对象的实例。
* 每个实例单独进行属性分配，不仅繁琐，而且容易出错。我们希望能够在一个地方将这些对象的属性和方法整合
* 为一个类。
*
* 每一个函数都具有一个原型对象。
* 每一个函数的原型具有一个 constructor 属性，该属性指向函数本身。
* constructor 对象的原型设置为新创建的对象的原型。
*
*
* */