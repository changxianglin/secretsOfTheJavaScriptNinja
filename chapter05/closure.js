/*
* 第 5 章 精通函数: 闭包和作用域
* 使用闭包可以减少代码数量和复杂度来添加高级特性，还能实现不太可能完成的功能。
* 如果没有闭包，将完全不可能实现私有变量。
* JavaScript 语言的蓝图，以及我们编码的方式，都是由闭包塑造出来的。
* 从传统意义上来说，闭包是由纯函数式编程语言的特性之一。
* 令人鼓舞的是，闭包也进入了主流开发语言，因为闭包能够大大的简化复杂操作，所以很容易在
* JavaScript 库或其他高级代码库种看出闭包的使用。
*
* 闭包带来的问题是 JavaScript 的作用域是如何工作的。为此我们将探讨 JavaScript 的作用域
* 规则，需要特别注意新增的特性。
*
* 5.1 理解闭包
* 闭包允许函数访问并操作函数外部的变量。只要变量或函数存在于声明函数时的作用域内，闭包即可使函数能访问这些
* 变量或函数。
*
* 当在外部函数种声明内部函数时，不仅定义了函数的声明，而且还创建了一个闭包。该闭包不仅包含了函数的声明，
* 还包含了在函数声明作用域中的所有变量。当最终执行内部函数时，尽管声明时的作用域已经消失了，但是通过闭包，
* 任然能够访问到原始作用域。
*
* 谨记每一个通过闭包访问变量的函数都具有一个作用域链，作用域链包含闭包的全部信息，这一点非常重要。
*
* 5.2 使用闭包
* 首先我们会关闭闭包的实用性和优势。
*
* 5.2.1 封装私有变量
* 许多编程语言使用私有变量、这些私有变量时对外部隐藏的对象属性。
* 这是非常有用的一种特性，因为当通过其他代码访问这些变量时，我们不希望
* 对象的实现细节对用户造成过度负荷。
*
* 我们可通过闭包内部方法获取私有变量的值，但是不能直接访问私有变量。这有效地阻止了读取私有变量不
* 可控的修改，这与真是的面向对象语言中的私有变量一样。
*
* 5.2.2 回调函数
* 处理回调函数时另一种常见的使用闭包的情景。
* 闭包内的函数不仅可以在创建时刻访问这些变量，而且当闭包内部的函数执行时，还可以更新这些变量的值。
* 闭包不是在创建的那一时刻的状态的快照，二十一个真是的状态封装，只要闭包在，就可以对变量进行修改。
* 闭包和作用域是强相关的。
*
* 5.2.3 通过执行上下文来跟踪代码
* JavaScript 代码有两种类型：一种是全局代码，在所有函数外部定义，一种是函数代码，位于函数内部。
* JavaScript 引擎执行代码时，每一条语句都处于特定的执行上下文中。
*
* 既然有两种类型的两码，那么就有两种执行上下文：全局执行上下文和函数执行上下文。
* 二者最重要的而差别是：全局执行上下文只有一个，当 JavaScript 程序开始执行时就已经创建了全局上下文，
* 而函数上下文是在每次调用函数时，就会创建一个新的。
*
* 调用栈
*
* 5.4 使用词法环境跟踪变量的作用域
* 词法环境是 JavaScript 引擎内部用来跟踪标识与特定变量质检的映射关系。
*
* 5.4.1 代码嵌套
* 词法环境主要基于代码嵌套，通过代码嵌套可以实现代码结构包含另一代码结构。
*
* 5.4.2 代码嵌套与词法环境
* 除了跟踪局部变量、函数声明、函数的参数和词法环境外,还有必要跟踪外部词法环境。
* 因为我们需要访问外部代码结构中的变量，如果在当前环境无法找到某一标识符。就会对外部环境进行查找。
* 一旦查找到匹配的变量，或是在全局环境中任然无法查找到对应的标识符而返回错误， 就会停止查找。
*
* */